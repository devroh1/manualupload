import { ThemeStylePropKey } from '../types/theme';
import { ComponentClassName } from './types';
export declare const strHasLength: (str: unknown) => str is string;
export declare const isFunction: (fn: unknown) => fn is Function;
export declare const isEmptyString: (value: unknown) => boolean;
export declare const isNullOrEmptyString: (value: unknown) => boolean;
/**
 * Create a consecutive integer array from start value to end value.
 * @param start start value
 * @param end end value
 * @returns an integer array with elements from start to end consecutively
 */
export declare const getConsecutiveIntArray: (start: number, end: number) => number[];
/**
 * This method is used to parse through all of the overrides and
 * only pass the relevant child overrides for a given component.
 * @internal
 * @param overrides escape hatch props
 * @param elementHierarchy
 * @returns overrides only for specified element
 */
export declare const findChildOverrides: (overrides: EscapeHatchProps | null | undefined, elementHierarchy: string) => EscapeHatchProps | null;
/**
 * This helper method is used to get the overrides
 * that will be applied to a component
 * @internal
 * @param overrides escape hatch props
 * @param elementHierarchy
 * @returns component overrides
 */
export declare const getOverrideProps: (overrides: EscapeHatchProps | null | undefined, elementHierarchy: string) => EscapeHatchProps | null;
export declare type EscapeHatchProps = {
    [elementHierarchy: string]: Record<string, unknown>;
};
declare type VariantValues = {
    [key: string]: string;
};
export declare type Variant = {
    variantValues: VariantValues;
    overrides: EscapeHatchProps;
};
/**
 * Given a list of style variants, select a given one based on input props
 * @internal
 * @param variants list of style variants to select from
 * @param props variant values to select from the list, may include additional props, to tidy up usage upstream
 */
export declare function getOverridesFromVariants<T>(variants: Variant[], props: {
    [key: string]: T;
}): {
    [key: string]: Variant;
};
/**
 * This helper method is used to merge
 * variants with overrides
 * @internal
 * @param variants
 * @param overrides
 * @returns merged variants with overrides
 */
export declare const mergeVariantsAndOverrides: (variants: EscapeHatchProps, overrides: EscapeHatchProps) => EscapeHatchProps;
declare type Modifiers = string | number | null;
/**
 * This helper function creates modifier class names that are used for our flat BEM styling
 * it takes in a base and modifier and returns the modified class if a modifier was passed in and null otherwise
 * @param base The base class of the output
 * @param modifier The modifier to add onto the base
 * @returns the modified class name or null
 */
export declare const classNameModifier: (base: ComponentClassName, modifier: Modifiers) => string;
/**
 * This helper function creates modified class names that are used for our flat BEM styling
 * it takes in a base, modifier, and flag and returns the modified class name if the flag is true and null if the flag is false
 * @param base
 * @param modifier
 * @param flag
 * @returns the modified class name or null
 */
export declare const classNameModifierByFlag: (base: ComponentClassName, modifier: Modifiers, flag: boolean) => string;
export declare const getCSSVariableIfValueIsThemeKey: <Value>(propKey: ThemeStylePropKey, value: Value) => string | Value;
export {};
